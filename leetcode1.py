# -*- coding: utf-8 -*-
"""Leetcode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-S4QjDYAP393JO5NRGfpTGEVvU6MFyy4

1. Merge strings alternatively
"""

word1 = 'abc'
word2 = 'pqr'
class Solution(object):
    def mergeAlternately(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: str
        """
        merged=""
        l1 = len(word1)
        l2 = len(word2)
        l = max(l1,l2)
        for i in range(l):
            if i < l1:
                merged += word1[i]
            if i < l2:
                merged += word2[i]
        return merged
s1=Solution()
s1.mergeAlternately

solution = Solution()
result = solution.mergeAlternately(word1, word2)
print("Merged string:", result)

"""2. Find the difference"""

s = 'abcd'
t = 'abcde'
class Solution:
    def findTheDifference(self, s, t) :
        return list((Counter(t) - Counter(s)).keys())[0]

from collections import Counter

solution = Solution()
result = solution.findTheDifference(s, t)

print(f"The difference between '{t}' and '{s}' is '{result}'.")

"""3. Find the index of the first occurence in a string"""

haystack = 'sadbutsad'
needle = 'sad'
class Solution:
    def strStr(self, haystack, needle):
        return haystack.find(needle)

solution = Solution()
result = solution.strStr(haystack, needle)

if result != -1:
    print(f"The substring '{needle}' is found at index {result} in the string '{haystack}'.")
else:
    print(f"The substring '{needle}' is not found in the string '{haystack}'.")

"""4. Valid Anagram"""

s = "anagram"
t = "nagaram"
class Solution(object):
    def isAnagram(self, s, t):
        return sorted(s)==sorted(t)

solution = Solution()
result = solution.isAnagram(s, t)
if result:
    print("The strings are anagrams.")
else:
    print("The strings are not anagrams.")

"""5. Repeated Substring pattern"""

s = "abab"
class Solution:
    def repeatedSubstringPattern(self, s):
        ss = (s+s)[1:-1]
        return s in ss

solution = Solution()
result = solution.repeatedSubstringPattern(s)
if result:
    print("The string follows a repeated substring pattern.")
else:
    print("The string does not follow a repeated substring pattern.")

"""6. Move zeroes"""

nums = [0,1,0,3,12]
class Solution(object):
    def moveZeroes(self, nums):
        n=len(nums)
        for i in range(0,n):
            if nums[i]==0:
                nums.remove(nums[i])
                nums.append(0)
        return nums

solution = Solution()
result = solution.moveZeroes(nums)
print("Modified list with zeroes moved to the end:", result)

"""7. Length of last word"""

s = "Hello World"
class Solution:
    def lengthOfLastWord(self, s):
        return len(s.strip().split(" ")[-1])

solution = Solution()
result = solution.lengthOfLastWord(s)
print("Length of the last word:", result)

"""8. To lower case"""

s = "Hello"
class Solution(object):
    def toLowerCase(self, s):
       return s.lower()

solution = Solution()
result = solution.toLowerCase(s)
print("Lowercased string:", result)

"""9. Robot return to origin"""

moves = "UD"
class Solution:
    def judgeCircle(self, moves):
        if len(moves)%2==0:
            if moves.count("U")==moves.count("D") and moves.count("L")==moves.count("R"):
                return True
            return False

solution = Solution()
if result:
    print("The robot returns to the starting position.")
else:
    print("The robot does not return to the starting position.")

"""10. Average salary excluding the minimum and maximum salary"""

salary = [4000,3000,1000,2000]
class Solution:
    def average(self, salary):
        return (sum(salary)-min(salary)-max(salary))/float((len(salary)-2))

solution = Solution()
result = solution.average(salary)
print("Average salary:", result)

"""11. Richest customer wealth

"""

accounts = [[1,2,3],[3,2,1]]
class Solution:
    def maximumWealth(self, accounts):
        return max(map(sum, accounts))

solution = Solution()
result = solution.maximumWealth(accounts)
print("Maximum wealth:", result)

"""12. Largest Perimeter Triangle"""

nums = [2,1,2]
class Solution(object):
    def largestPerimeter(self, nums):
        nums.sort()
        lst = []
        for i in range(len(nums)-2):
            a,b,c = nums[i],nums[i+1],nums[i+2]
            if a+b>c:
                lst.append(a+b+c)
        if len(lst) >= 1:
            return max(lst)
        else:
            return 0

solution = Solution()
result = solution.largestPerimeter(nums)
print("Largest Perimeter:", result)

"""13. Add Binary"""

a = "11"
b = "1"
class Solution(object):
    def addBinary(self,a, b):
        int_a = int(a, 2)
        int_b = int(b, 2)

        result = int_a + int_b

        binary_result = bin(result)[2:]

        return binary_result

solution = Solution()
result = solution.addBinary(a, b)
print(result)

"""14. Count Odd numbers in interval range"""

low = 3
high = 7
class Solution(object):
    def countOdds(self, low, high):
        count = ((high - low)//2)
        if high %2 !=0 or low % 2 !=0:
            count += 1

        return count
solution = Solution()
result = solution.countOdds(low,high)
print(result)

"""15. Check if it is a  straight line"""

coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
class Solution(object):
    def checkStraightLine(self, coordinates):
       x1,y1 = coordinates[0]
       x2,y2 = coordinates[1]
       for i in range(2,len(coordinates)):
           x,y =coordinates[i]
           if (y-y1) * (x-x2) != (y-y2)*(x-x1):
               return False

       return True
solution = Solution()
result = solution.checkStraightLine(coordinates)
print(result)

"""16. Lemonade Change"""

bills = [5,5,5,10,20]
class Solution(object):
    def lemonadeChange(self, bills):
        five_bills = ten_bills = 0

        for bill in bills:
            if bill == 5:
                five_bills += 1
            elif bill == 10:
                if five_bills > 0:
                    five_bills -= 1
                    ten_bills += 1
                else:
                    return False
            elif bill == 20:
                if ten_bills > 0 and five_bills > 0:
                    ten_bills -= 1
                    five_bills -= 1
                elif five_bills >= 3:
                    five_bills -= 3
                else:
                    return False

        return True

solution = Solution()
result = solution.lemonadeChange(bills)
print(result)

"""17. Baseball game"""

ops = ["5","2","C","D","+"]
class Solution(object):
    def calPoints(self, ops):
        x=[]
        for i in ops:
            if i == "+":
                x.append(x[-1]+x[-2])
            elif i == "D":
                x.append(2*x[-1])
            elif i == "C":
                x.pop()
            else:
                x.append(int(i))
        return sum(x)
solution = Solution()
result = solution.calPoints(ops)
print(result)

"""18. Pow(x,n)

"""

x = 2.00000
n = 10
class Solution:
    def myPow(self, x, n):
        result = x**n
        return result
solution = Solution()
result = solution.myPow(x,n)
print(result)

"""19. Set Matrix Zeroes"""

matrix = [[1,1,1],[1,0,1],[1,1,1]]
class Solution(object):
    def setZeroes(self, matrix):
        row = [False]*len(matrix)
        col = [False]*len(matrix[0])

        m= len(matrix)
        n= len(matrix[0])

        for i in range(m):
            for j in range(n):
                if(matrix[i][j]==0):
                    row[i]=True
                    col[j]=True

        for i in range(m):
            for j in range(n):
                if(row[i] or col[j]):
                    matrix[i][j]=0

solution = Solution()
result = solution.setZeroes(matrix)
print(result)

"""20. Roman to Integer"""

s = "III"
class Solution:
    def romanToInt(self, s):
        roman_to_integer = {
            'I': 1,
            'V': 5,
            'X': 10,
            'L': 50,
            'C': 100,
            'D': 500,
            'M': 1000,
        }
        s = s.replace("IV", "IIII").replace("IX", "VIIII").replace("XL", "XXXX").replace("XC", "LXXXX").replace("CD", "CCCC").replace("CM", "DCCCC")
        return sum(map(lambda x: roman_to_integer[x], s))

solution = Solution()
result = solution.romanToInt(s)
print(result)

"""21. Multiply Strings"""

num1 = "2"
num2 = "3"
class Solution(object):
    def multiply(self, num1, num2):

        first_number=int(num1)
        second_number=int(num2)
        product=first_number*second_number
        return str(product)
sl=Solution()
sl.multiply

solution = Solution()
result = solution.multiply(num1,num2)
print(result)

"""22. Monotonic Array"""

nums = [1,2,2,3]
class Solution(object):
    def isMonotonic(self, nums):
        monotonic = True
        monotonic1 = True

        for i in range(len(nums) - 1):
            if nums[i] > nums[i + 1]:
                monotonic = False

        for i in range(len(nums) - 1):
            if nums[i] < nums[i + 1]:
                monotonic1 = False

        if monotonic:
            return monotonic
        elif monotonic1:
            return monotonic1
        else:
            return False

solution = Solution()
result = solution.isMonotonic(nums)
print(result)

"""23. Can make arithmetic progression from sequence"""

arr = [3,5,1]
class Solution(object):
    def canMakeArithmeticProgression(self, arr):
        arr.sort()
        diff = arr[0] - arr[1]
        for i in range(len(arr)-1):
            if arr[i] - arr[i+1] != diff:
                return False
        return True
solution = Solution()
result = solution.canMakeArithmeticProgression(arr)
print(result)