# -*- coding: utf-8 -*-
"""Leetcode.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-S4QjDYAP393JO5NRGfpTGEVvU6MFyy4

1. Merge strings alternatively
"""

word1 = 'abc'
word2 = 'pqr'
class Solution(object):
    def mergeAlternately(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: str
        """
        merged=""
        l1 = len(word1)
        l2 = len(word2)
        l = max(l1,l2)
        for i in range(l):
            if i < l1:
                merged += word1[i]
            if i < l2:
                merged += word2[i]
        return merged
s1=Solution()
s1.mergeAlternately

solution = Solution()
result = solution.mergeAlternately(word1, word2)
print("Merged string:", result)

"""2. Find the difference"""

s = 'abcd'
t = 'abcde'
class Solution:
    def findTheDifference(self, s, t) :
        return list((Counter(t) - Counter(s)).keys())[0]

from collections import Counter

solution = Solution()
result = solution.findTheDifference(s, t)

print(f"The difference between '{t}' and '{s}' is '{result}'.")

"""3. Find the index of the first occurence in a string"""

haystack = 'sadbutsad'
needle = 'sad'
class Solution:
    def strStr(self, haystack, needle):
        return haystack.find(needle)

solution = Solution()
result = solution.strStr(haystack, needle)

if result != -1:
    print(f"The substring '{needle}' is found at index {result} in the string '{haystack}'.")
else:
    print(f"The substring '{needle}' is not found in the string '{haystack}'.")

"""4. Valid Anagram"""

s = "anagram"
t = "nagaram"
class Solution(object):
    def isAnagram(self, s, t):
        return sorted(s)==sorted(t)

solution = Solution()
result = solution.isAnagram(s, t)
if result:
    print("The strings are anagrams.")
else:
    print("The strings are not anagrams.")

"""5. Repeated Substring pattern"""

s = "abab"
class Solution:
    def repeatedSubstringPattern(self, s):
        ss = (s+s)[1:-1]
        return s in ss

solution = Solution()
result = solution.repeatedSubstringPattern(s)
if result:
    print("The string follows a repeated substring pattern.")
else:
    print("The string does not follow a repeated substring pattern.")

"""6. Move zeroes"""

nums = [0,1,0,3,12]
class Solution(object):
    def moveZeroes(self, nums):
        n=len(nums)
        for i in range(0,n):
            if nums[i]==0:
                nums.remove(nums[i])
                nums.append(0)
        return nums

solution = Solution()
result = solution.moveZeroes(nums)
print("Modified list with zeroes moved to the end:", result)

"""7. Length of last word"""

s = "Hello World"
class Solution:
    def lengthOfLastWord(self, s):
        return len(s.strip().split(" ")[-1])

solution = Solution()
result = solution.lengthOfLastWord(s)
print("Length of the last word:", result)

"""8. To lower case"""

s = "Hello"
class Solution(object):
    def toLowerCase(self, s):
       return s.lower()

solution = Solution()
result = solution.toLowerCase(s)
print("Lowercased string:", result)

"""9. Robot return to origin"""

moves = "UD"
class Solution:
    def judgeCircle(self, moves):
        if len(moves)%2==0:
            if moves.count("U")==moves.count("D") and moves.count("L")==moves.count("R"):
                return True
            return False

solution = Solution()
if result:
    print("The robot returns to the starting position.")
else:
    print("The robot does not return to the starting position.")

"""10. Average salary excluding the minimum and maximum salary"""

salary = [4000,3000,1000,2000]
class Solution:
    def average(self, salary):
        return (sum(salary)-min(salary)-max(salary))/float((len(salary)-2))

solution = Solution()
result = solution.average(salary)
print("Average salary:", result)

"""11. Richest customer wealth

"""

accounts = [[1,2,3],[3,2,1]]
class Solution:
    def maximumWealth(self, accounts):
        return max(map(sum, accounts))

solution = Solution()
result = solution.maximumWealth(accounts)
print("Maximum wealth:", result)